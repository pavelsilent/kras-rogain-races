{{>licenseInfo}}
import { HttpClient, HttpHeaders, HttpParams, HttpParameterCodec } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { CustomHttpParameterCodec } from './encoder';
import { {{configurationClassName}} } from './configuration';
import { BASE_PATH } from '../variables';

@Injectable({
  providedIn: 'root',
})
export class BaseService {
  public defaultHeaders = new HttpHeaders();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    protected configuration: {{configurationClassName}},
    @Optional() @Inject(BASE_PATH) protected basePath: string = configuration.basePath || ''
  ) {
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  protected canConsumeForm(consumes: string[]): boolean {
    return consumes.indexOf('multipart/form-data') !== -1;
  }

  protected addToHttpParams(httpParams: HttpParams, value: any, key?: string, isDeep: boolean = false): HttpParams {
    if (typeof value === 'object' && !(value instanceof Date)) {
      return this.addToHttpParamsRecursive(httpParams, value, isDeep ? key : undefined, isDeep);
    }
    return this.addToHttpParamsRecursive(httpParams, value, key);
  }

  protected addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string, isDeep: boolean = false): HttpParams {
    if (value === null || value === undefined) {
      return httpParams;
    }
    if (typeof value === 'object') {
      if (key != null) {
        return isDeep
          ? Object.keys(value as Record<string, any>).reduce(
              (hp, k) => hp.append(`${key}[${k}]`, value[k]),
              httpParams,
            )
          : httpParams.append(key, JSON.stringify(value));
      }
      if (Array.isArray(value)) {
        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString());
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(k => {
          const paramKey = key ? `${key}.${k}` : k;
          httpParams = this.addToHttpParamsRecursive(httpParams, value[k], paramKey);
        });
      }
      return httpParams;
    } else if (key != null) {
      return httpParams.append(key, value);
    }
    throw Error('key may not be null if value is not object or array');
  }
}
